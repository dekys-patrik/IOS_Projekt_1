#!/bin/bash

# Title: XTF - eXtortion, Travesty, Fraud
# Description: A script for pre-processing trade logs from crpyto stock exchange
# Author: Patrik Dekýš (xdekysp00@stud.fit.vutbr.cz)
# Last modified: 2024-03-13

export POSIXLY_CORRECT=yes
export LC_ALL=C

print_help()
{
    printf "%b" "Usage:  xtf [-h|--help]\n"
    printf "%b" "        xtf [FILTER] [COMMAND] USER LOG [LOG2 [...]\n"
    printf "%b" "COMMAND:\n"
    printf "%b" "        list - listing of records for a given user\n"
    printf "%b" "        list-currency - listing of the sorted list of occurring currencies\n"
    printf "%b" "        status - statement of the actual account balance, grouped and sorted by currency\n"
    printf "%b" "        profit - customer's account statement with fictitious return\n"
    printf "%b" "FILTER:\n"
    printf "%b" "        -a DATETIME - after: only records AFTER this date and time (without it), DATETIME is a format YYYY-MM-DD HH:MM:SS\n"
    printf "%b" "        -b DATETIME - before: only records BEFORE this one are considered date and time (without)\n"
    printf "%b" "        -c CURRENCY - only records corresponding to the given currency\n"
}

# Default values for the options
COMMAND=""
FILTER1=""
FILTER2=""
FILTER3=""
USER=""
LOG=""

# Default value for the profit in percent
XTF_PROFIT=${XTF_PROFIT:-20}

# Counters for the number of times each option is used
COUNT_COMMAND=0
COUNT_FILTER1=0
COUNT_FILTER2=0
COUNT_USER=0

# Output values of functions
FILTERED=""
CURRENCIES=""
STATUS=""
PROFIT=""

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            print_help
            exit 0
            ;;
        -a)
            if [ "$COUNT_FILTER1" = 0 ]; then
                if [[ "$2" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
                    FILTER1="$2"
                    COUNT_FILTER1=1
                else 
                    printf "Invalid DATE format\n" >&2
                    exit 1
                fi
            else
                printf "More than one FROM DATE\n" >&2
                exit 1
            fi
            shift 2
            ;;
        -b)
            if [ "$COUNT_FILTER2" = 0 ]; then
                if [[ "$2" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
                    FILTER2="$2"
                    COUNT_FILTER2=1
                else 
                    printf "Invalid DATE format" >&2
                    exit 1
                fi
            else
                printf "More than one TO DATE\n" >&2
                exit 1
            fi
            shift 2
            ;;
        -c)
            FILTER3="$2"
            shift 2
            ;;
        list | list-currency | status | profit)
            if [ "$COUNT_COMMAND" = 0 ]; then
                COMMAND="$1"
                COUNT_COMMAND=1
            else
                printf "More than one COMAND\n" >&2
                exit 1
            fi
            shift
            ;;
        *)
            case "$1" in
                *.log|*.gz)
                    LOG="$LOG $1"
                    ;;
                *)
                    if [ "$prev_arg" != '-a' ] && [ "$prev_arg" != '-b' ] && [ "$prev_arg" != '-c' ]; then
                        if [ "$COUNT_USER" = 0 ]; then
                            USER="$1"
                            COUNT_USER=1
                        else
                        printf "More than one USER\n" >&2
                        exit 1
                        fi
                    fi
                    ;;
            esac
            prev_arg="$1"
            shift
            ;;
    esac
done

list()
{
    for logfile in $LOG; do
        if [ -f "$logfile" ]; then
            if [ "${logfile##*.}" = "gz" ]; then
                # Check if gunzip command exists
                if command -v gunzip >/dev/null 2>&1; then
                    # Use gunzip to decompress the file
                    decompressed_log=$(gunzip -c "$logfile")
                    # Use awk to filter lines containing the USER and sort them
                    filtered_lines=$(printf "%b" "$decompressed_log" | awk -F';' -v user="$USER" '$1 == user' | sort)
                else
                    continue
                fi
            else
                # Use awk to filter lines containing the USER and sort them
                filtered_lines=$(awk -F';' -v user="$USER" '$1 == user' "$logfile" | sort)
            fi

            # If FILTER1 is set, filter lines after the specified date
            if [ -n "$FILTER1" ]; then
                filtered_lines=$(printf "%b" "$filtered_lines" | awk -v filter1="$FILTER1" -F';' '{if ($2 > filter1) print}')
            fi

            # If FILTER2 is set, filter lines before the specified date
            if [ -n "$FILTER2" ]; then
                filtered_lines=$(printf "%b" "$filtered_lines" | awk -v filter2="$FILTER2" -F';' '{if ($2 < filter2) print}')
            fi

            # If FILTER3 is set, filter lines by currency
            if [ -n "$FILTER3" ]; then
                filtered_lines=$(printf "%b" "$filtered_lines" | awk -v filter3="$FILTER3" -F';' '{if ($3 == filter3) print}')
            fi

            # Store the filtered lines in the FILTERED variable
            if [ -n "$filtered_lines" ]; then
                FILTERED="$FILTERED$filtered_lines\n"
            fi
        else
            printf "Error message\n" >&2
        fi
    done
}

list_currency()
{   
    list
    CURRENCIES=$(printf "%b" "$FILTERED" | awk -F';' '{print $3}' | sort | uniq | awk 'NF')
}

status()
{
    list_currency

    # Loop through each currency in CURRENCIES
    for currency in $CURRENCIES; do
        # Calculate actual account balance for the currency
        balance=$(printf "%b" "$FILTERED" | awk -v curr="$currency" -F';' 'BEGIN {sum=0} $3 == curr {sum += $4} END {printf "%.4f\n", sum}')

        # Append currency and balance to the STATUS variable
        STATUS="$STATUS$currency : $balance\n"
    done
}

profit()
{
    list_currency

    # Loop through each currency in CURRENCIES
    for currency in $CURRENCIES; do
        # Calculate the actual account balance for the currency
        balance=$(printf "%b" "$FILTERED" | awk -v curr="$currency" -v profit_xtf="$XTF_PROFIT" -F';' 'BEGIN {sum=0} $3 == curr {if ($4 > 0) sum += $4 * (profit_xtf + 100) / 100; else sum += $4} END {printf "%.4f\n", sum}')

        # Append currency and balance to the PROFIT variable
        PROFIT="$PROFIT$currency : $balance\n"
    done
}


if [ "$COMMAND" = "list" ] || [ -z "$COMMAND" ]; then
    list
    printf "%b" "$FILTERED"

elif [ "$COMMAND" = "list-currency" ]; then
    list_currency
    printf "%b" "$CURRENCIES"

elif [ "$COMMAND" = "status" ]; then
    status
    printf "%b" "$STATUS"

elif [ "$COMMAND" = "profit" ]; then
   profit
   printf "%b" "$PROFIT"
fi

# DEBUGGING:
# printf "%b" "USER: $USER"
# printf "%b" "COMMAND: $COMMAND"
# printf "%b" "FILTER1: $FILTER1"
# printf "%b" "FILTER3: $FILTER3"
# printf "%b" "FILTER2: $FILTER2"
# printf "%b" "FILTERED:"
# printf "%b" "$FILTERED"
# printf "%b" "LOGY: $LOG"
# printf "%b" "PROFIT: $PROFIT\n"
# printf "%b" "$CURRENCIES"