#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_us.UTF-8

print_help()
{
    echo "Usage:  xtf [-h|--help]"
    echo "        xtf [FILTER] [COMMAND] USER LOG [LOG2 [...]"
    echo ""
    echo "COMMAND:"
    echo "        list - listing of records for a given user"
    echo "        list-currency - listing of the sorted list of occurring currencies"
    echo "        status - statement of the actual account balance, grouped and sorted by currency"
    echo "        profit - customer's account statement with fictitious return"
    echo ""
    echo "FILTER:"
    echo "        -a DATETIME - after: only records AFTER this date and time (without it), DATETIME is a format YYYY-MM-DD HH:MM:SS"
    echo "        -b DATETIME - before: only records BEFORE this one are considered date and time (without)"
    echo "        -c CURRENCY - only records corresponding to the given currency"
}

# Default values for the options
COMMAND=""
FILTER1=""
FILTER2=""
FILTER3=""
USER=""
LOG=""

# Default value for the profit in percent
XTF_PROFIT=${XTF_PROFIT:-20}

# Counters for the number of times each option is used
COUNT_COMMAND=0
COUNT_FILTER1=0
COUNT_FILTER2=0
COUNT_USER=0
COUNT_LOG=0

# Output values of functions
FILTERED=""
CURRENCIES=""
STATUS=""
PROFIT=""

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            print_help
            exit 0
            ;;
        -a)
            if [ "$COUNT_FILTER1" = 0 ]; then
                FILTER1="$2"
                COUNT_FILTER1=1
            else
                #TODO: error message if needed
                exit 1
            fi
            shift 2
            ;;
        -b)
            if [ "$COUNT_FILTER2" = 0 ]; then
                FILTER2="$2"
                COUNT_FILTER2=1
            else
                #TODO: error message if needed
                exit 1
            fi
            shift 2
            ;;
        -c)
            FILTER3="$2"
            shift 2
            ;;
        list | list-currency | status | profit)
            if [ "$COUNT_COMMAND" = 0 ]; then
                COMMAND="$1"
                COUNT_COMMAND=1
            else
                #TODO: error message if needed
                exit 1
            fi
            shift
            ;;
        *)
            case "$1" in
                *.log|*.gz)
                    LOG="$LOG $1"
                    ;;
                *)
                    if [ "$prev_arg" != '-a' ] && [ "$prev_arg" != '-b' ] && [ "$prev_arg" != '-c' ]; then
                        if [ "$COUNT_USER" = 0 ]; then
                            USER="$1"
                            COUNT_USER=1
                        else
                        #TODO: error message if needed
                        exit 1
                        fi
                    fi
                    ;;
            esac
            prev_arg="$1"
            shift
            ;;
    esac
done

list()
{
    for logfile in $LOG; do
        if [ -f "$logfile" ]; then
            if [ "${logfile##*.}" = "gz" ]; then
                # Check if gunzip command exists
                if command -v gunzip >/dev/null 2>&1; then
                    # Use gunzip to decompress the file
                    decompressed_log=$(gunzip -c "$logfile")
                    # Use awk to filter lines containing the USER and sort them
                    filtered_lines=$(echo "$decompressed_log" | awk -F';' -v user="$USER" '$1 == user' | sort)
                else
                     echo "" #TODO: error message if needed
                    continue
                fi
            else
                # Use awk to filter lines containing the USER and sort them
                filtered_lines=$(awk -F';' -v user="$USER" '$1 == user' "$logfile" | sort)
            fi

            # If FILTER1 is set, filter lines after the specified date
            if [ -n "$FILTER1" ]; then
                filtered_lines=$(echo "$filtered_lines" | awk -v filter1="$FILTER1" -F';' '{if ($2 > filter1) print}')
            fi

            # If FILTER2 is set, filter lines before the specified date
            if [ -n "$FILTER2" ]; then
                filtered_lines=$(echo "$filtered_lines" | awk -v filter2="$FILTER2" -F';' '{if ($2 < filter2) print}')
            fi

            # If FILTER3 is set, filter lines by currency
            if [ -n "$FILTER3" ]; then
                filtered_lines=$(echo "$filtered_lines" | awk -v filter3="$FILTER3" -F';' '{if ($3 == filter3) print}')
            fi

            # Store the filtered lines in the FILTERED variable
            if [ -n "$filtered_lines" ]; then
                if [ "$COUNT_LOG" = 0 ]; then
                FILTERED="$FILTERED$filtered_lines\n"
                COUNT_LOG=0
                else
                FILTERED="$FILTERED$filtered_lines"
                COUNT_LOG=1
                fi 
            fi
        else
            echo "" #TODO: error message if needed
        fi
    done
}

list_currency()
{   
    list
    CURRENCIES=$(echo "$FILTERED" | awk -F';' '{print $3}' | sort | uniq | awk 'NF')
}

status()
{
    list_currency

    # Loop through each currency in CURRENCIES
    for currency in $CURRENCIES; do
        # Calculate actual account balance for the currency
        balance=$(echo "$FILTERED" | awk -v curr="$currency" -F';' 'BEGIN {sum=0} $3 == curr {sum += $4} END {printf "%s : %.4f\n", curr, sum}')

        # Append currency and balance to the STATUS variable
        STATUS="$STATUS$balance\n"
    done
}

profit()
{
    list_currency

    # Loop through each currency in CURRENCIES
    for currency in $CURRENCIES; do
        # Calculate the actual account balance for the currency
        balance=$(echo "$FILTERED" | awk -v curr="$currency" -v profit_xtf="$XTF_PROFIT" -F';' 'BEGIN {sum=0} $3 == curr {if ($4 > 0) sum += $4 * (profit_xtf + 100) / 100; else sum += $4} END {printf "%s : %.4f\n", curr, sum}')

        # Append currency and balance to the PROFIT variable
        PROFIT="$PROFIT$balance\n"
    done

    # Print the final profit
    echo "$PROFIT"
}

if [ "$COMMAND" = "list" ] || [ -z "$COMMAND" ]; then
    list
    echo "$FILTERED"

elif [ "$COMMAND" = "list-currency" ]; then
    list_currency
    echo "$CURRENCIES"

elif [ "$COMMAND" = "status" ]; then
    status
    echo "$STATUS"

elif [ "$COMMAND" = "profit" ]; then
   profit
fi

# DEBUGGING:
# echo "USER: $USER"
# echo "COMMAND: $COMMAND"
# echo "FILTER1: $FILTER1"
# echo "FILTER3: $FILTER3"
# echo "FILTER2: $FILTER2"
# echo "FILTERED:"
# echo "$FILTERED"
# echo "LOGY: $LOG"
# echo "PROFIT: $PROFIT\n"
# echo "$CURRENCIES"